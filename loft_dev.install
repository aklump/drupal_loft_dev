<?php
/**
 * @file
 * Handles installation steps for loft_dev
 *
 * @ingroup func_search
 * @{
 */

/*
 * Implements hook_uninstall().
 */
function loft_dev_uninstall() {

  //Clean up our entries in the variables table.
  if ($result = db_query("SELECT name FROM {variable} WHERE `name` LIKE 'loft_dev%'")) {
    foreach($result as $data) {
      variable_del($data->name);
    }
  }

  //delete blocks
  db_query("DELETE FROM {block} WHERE `module` = 'loft_dev'");
}

/**
 * Implements hook_enable().
 */
function loft_dev_enable() {

  //message about module settings
  drupal_set_message(t('You may adjust settings for Loft Dev Tools by visiting <a href="@url">@url</a>.', array('@url' => url('admin/loft-dev'))));

  //change the system weight for the module, if needed
  //$weight = db_query("SELECT weight FROM {system} WHERE name = 'fieldgroup'")->fetchField();
  //db_query("UPDATE {system} SET `weight` = ". ++$weight ." WHERE name = 'loft_dev'"); //don't do alimit on this query in case there are more than one entries?

  // Give all devel perms to all rids automatically
  $all_rids = array_keys(user_roles());
  $perms = $altered = array();
  $modules = array('devel', 'devel_node_access');
  foreach ($modules as $module) {
    $perms = module_invoke($module, 'permission');
    foreach (array_keys($perms) as $permission) {
      foreach ($all_rids as $rid) {
        $query = db_select('role_permission', 'p');
        $query
          ->fields('p')
          ->condition('rid', $rid)
          ->condition('permission', $permission)
          ->countQuery();
        $count = $query->execute()->fetchField();
        if ($count < 1) {
          $altered[$module][$permission][$rid] = $rid;
          $data = array(
            'rid' => $rid,
            'module' => $module,
            'permission' => $permission,
          );
          drupal_write_record('role_permission', $data);
        }
      }
    }
  }
  variable_set('loft_dev_altered_perms', $altered);
}

/**
 * Implements hook_disable().
 */
function loft_dev_disable() {

  // Find out what permissions we imposed when we enabled and remove them
  $altered = variable_get('loft_dev_altered_perms');
  foreach ($altered as $module => $permissions) {
    foreach ($permissions as $permission => $rids) {
      db_delete('role_permission')
      ->condition('module', $module)
      ->condition('permission', $permission)
      ->condition('rid', $rids, 'IN')
      ->execute();
    }
  }
  variable_del('loft_dev_altered_perms');
}

/**
 * Implements hook_requirements().
 *
 * Checks installation requirements and do status reporting.
 * http://api.drupal.org/api/function/hook_requirements
 *
 * @param phase 'install' or 'runtime':
 * @return A keyed array of requirements
 */
//function loft_dev_requirements($phase) {
//  $reqs = array();
//  $t = get_t();
//  if ($phase == 'runtime') {
//    $reqs['loft_dev'] = array(
//      'title' => $t('Title'),
//      'value' => $t('Value'),
//      'severity' => REQUIREMENT_WARNING,
//      'description' => $t(''),
//      );
    //if (!_oc_server_opl_exec($stdin)) {
    //  $reqs['oc_server']['value'] = $t('Not Found!');
    //  $reqs['oc_server']['description'] = $t('Make sure your server path is correct.');
    //  $reqs['oc_server']['severity'] = REQUIREMENT_ERROR;
    //}

//  }
//  return $reqs;
//}

/** @} */ //end of group loft_dev
