<?php
/**
* @file
* Base module file for loft_dev
*/

/**
 * Implements hook_menu()
 */
function loft_dev_menu() {
  $items = array();

  $items['admin/loft-dev'] = array(
    'title' => 'Loft Dev',
    'page callback' => 'loft_dev_page',
    'access arguments' => array('use loft dev tools'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'loft_dev.pages.inc',
  );
  $items['admin/loft-dev/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/loft-dev/theme/admin'] = array(
    'title' => 'Admin Theme Tester',
    'page callback' => 'loft_dev_theme_test_page',
    'page arguments' => array(3),
    'access arguments' => array('use loft dev tools'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'loft_dev.pages.inc',
  );
  $items['admin/loft-dev/theme/default'] = array(
    'title' => 'Default Theme Tester',
    'page callback' => 'drupal_goto',
    'page arguments' => array('loft-dev/theme'),
    'access arguments' => array('use loft dev tools'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'loft_dev.pages.inc',
  );
  $items['loft-dev/theme'] = array(
    'title' => 'Default Theme Tester',
    'page callback' => 'loft_dev_theme_test_page',
    'access arguments' => array('use loft dev tools'),
    'type' => MENU_CALLBACK,
    'file' => 'loft_dev.pages.inc',
  );
  $items['admin/loft-dev/funx'] = array(
    'title' => 'PHP Functions',
    'page callback' => 'loft_dev_list_functions_page',
    'access arguments' => array('use loft dev tools'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'loft_dev.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_form_alter
 */
function loft_dev_form_alter(&$form, $form_state, $form_id) {

  $is_new = (empty($form['old_type']['#value']));

  if ($form_id == 'node_type_form' && $is_new) {

    //modify the node body so it is blank by default
    $form['#node_type']->body_label = '';
    $form['#node_type']->has_body = FALSE;
    $form['submission']['body_label']['#default_value'] = '';

    //turn off comments by default
    $form['comment']['comment']['#default_value'] = 0;

    //turn off promoted to front page default
    unset($form['workflow']['node_options']['#default_value'][1]);

    //expand title fieldset to change the title
    $form['submission']['#collapsed'] = 0;
  }
}

/**
 * Implements hook_permission().
 */
function loft_dev_permission() {
  return array(
    'use loft_dev tools' => array(
      'title' => t('Use Loft Dev Tools'),
      'description' => t("Use In the Loft Studios' Development Tools."),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function loft_dev_block_info() {
  $blocks['0'] = array(
    'info' => t('Loft Dev Tools'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function loft_dev_block_view($delta = '') {
  switch ($delta) {
    case 0:

      $output = '';

      drupal_add_js('misc/collapse.js');
      drupal_add_css(drupal_get_path('module', 'loft_dev') .'/loft_dev.css');

      $links = module_invoke_all('loft_dev_menu');
      $output .= theme("links", array('links' => $links)) . "\n";

      if (module_exists('masquerade') &&
          ($temp = module_invoke('masquerade', 'block_view', 0))) {
        if (is_string($temp['content'])) {
          $temp['content'] = array('#markup' => $temp['content']);
        }
        $output .= '<h3>'. $temp['subject'] .'</h3>'."\n";
        $output .= drupal_render($temp['content']) ."\n";
      }

      $output .= render(menu_tree('devel'));

      if (($temp = module_invoke('devel_node_access', 'block_view', 0))) {
        if (is_string($temp['content'])) {
          $temp['content'] = array('#markup' => $temp['content']);
        }
        $output .= '<h3>'. $temp['subject'] .'</h3>'."\n";
        $output .= drupal_render($temp['content']) ."\n";
      }

      if (($temp = module_invoke('devel_node_access', 'block_view', 1))) {
        if (is_string($temp['content'])) {
          $temp['content'] = array('#markup' => $temp['content']);
        }
        $output .= '<h3>'. $temp['subject'] .'</h3>'."\n";
        $output .= drupal_render($temp['content']) ."\n";
      }

      if (module_exists('func_search') && ($temp = module_invoke('func_search', 'block_view', 0))) {
        if (is_string($temp['content'])) {
          $temp['content'] = array('#markup' => $temp['content']);
        }
        $output .= '<h3>'. $temp['subject'] .'</h3>'."\n";
        $output .= drupal_render($temp['content']) ."\n";
      }

      // Email output
      if (_loft_dev_reroute_email_status()) {
        $output .= t('<p>Reroute email is enabled and ready: %mail</p>', array(
          '%mail' => variable_get('reroute_email_address', NULL),
        )) . "\n";
      }
      else {
        $output .= t('<p>!!! REROUTE EMAIL IS NOT READY !!!</p>') . "\n";
      }


      // No more changes/additions
      $output = '<div class="loft-dev-closure">'. $output .'</div> <!-- /loft-dev-closure -->'."\n";
      $block = array(
        'subject' =>  t('Loft Dev Tools'),
        'content' => array('#markup' => $output),
      );
      break;
  }
  return $block;
}

/**
 * Return the current status of reroute email
 *
 * @return bool
 *   TRUE: it is enabled, and all configurations a go
 */
function _loft_dev_reroute_email_status() {
  $status = module_exists('reroute_email') &&
    variable_get('reroute_email_enable', NULL) &&
    variable_get('reroute_email_address', NULL);
  return $status;
}

/**
 * Implements hook_init().
 */
function loft_dev_init() {
  if (!_loft_dev_reroute_email_status()) {
    drupal_set_message(t('Reroute email is not properly enabled/configured. Fix immediately.'), 'error', FALSE);
  }
}
