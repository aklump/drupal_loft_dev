<?php
/**
* @file
* Base module file for loft_dev
*/
/**
 * The default interval for ld export
 *
 * 0 = disabled
 */
define('LOFT_DEV_LOFT_DEPLOY_EXPORT_PERIOD_MIN', 5);

/**
 * Implements hook_help().
 *
 * http://api.drupal.org/api/function/hook_help
 *
 * @param string $path
 *   The router menu path, as defined in hook_menu(), for the help that is
 *   being requested; e.g., 'admin/node' or 'user/edit'. If the router path
 *   includes a % wildcard, then this will appear in $path; for example, node
 *   pages would have $path equal to 'node/%' or 'node/%/view'. Your hook
 *   implementation may also be called with special descriptors after a "#" sign.
 * @param array $arg
 *   An array that corresponds to the return value of the arg() function, for
 *   modules that want to provide help that is specific to certain values of
 *   wildcards in $path. For example, you could provide help for the path
 *   'user/1' by looking for the path 'user/%' and $arg[1] == '1'. This array
 *   should always be used rather than directly invoking arg(), because your
 *   hook implementation may be called for other purposes besides building the
 *   current page's help. Note that depending on which module is invoking
 *   hook_help, $arg may contain only empty strings. Regardless, $arg[0] to
 *   $arg[11] will always be set.
 */
function loft_dev_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/loft-dev/theme':
    case 'admin/loft-dev/theme/admin':
    case 'loft-dev/theme':
    case 'loft-dev/theme/admin':
      $output .= 'Help area text ' . _loft_dev_dummy_string(24);
      return $output;
  }
}

/**
 * Include (or return include path to) a loft_dev include file(s)
 *
 * @code
 *   'file' => loft_dev_include('pages', 2),
 * @endcode
 *
 * @param... string
 *   Any number of include file keys to include
 *   For includes/loft_dev.example.inc, set this to: example
 * @param int $action
 *   The final argument, if numeric is one of.  If omitted 1 is the default.
 *   1: include the module(s)
 *   2: return the path relative to the module, e.g., hook_menu()
 *   3: return the complete Drupal path per drupal_get_path()
 *
 * @return string
 *   The path to the FIRST include file requested, but only if $return is set to TRUE
 */
function loft_dev_include() {
  $includes = func_get_args();
  if (is_numeric(end($includes))) {
    $action = array_pop($includes);
  }
  else {
    $action = 1;
  }
  if ($action > 1) {
    $module = 'includes/loft_dev.' .  reset($includes) . '.inc';
    switch ($action) {
      case 3:
        $module = drupal_get_path('module', 'loft_dev') . '/' . $module;
        break;
    }
    return $module;
  }
  reset($includes);
  foreach ($includes as $include_name) {
    module_load_include('inc', 'loft_dev', 'includes/loft_dev.' . $include_name);
  }
}

/**
 * Implements hook_menu()
 */
function loft_dev_menu() {
  $items = array();

  $items['admin/loft-dev'] = array(
    'title' => 'Loft Dev',
    'page callback' => 'loft_dev_page',
    'access callback' => '_loft_dev_access',
    'type' => MENU_NORMAL_ITEM,
    'file' => loft_dev_include('pages', 2),
  );
  $items['admin/loft-dev/migration'] = array(
    'title' => 'Migration',
    'page callback' => 'loft_dev_migration_page',
    'access callback' => '_loft_dev_access',
    'type' => MENU_NORMAL_ITEM,
    'file' => loft_dev_include('pages', 2),
  );
  $items['admin/loft-dev/parse-time'] = array(
    'title' => 'Pull Timestamps',
    'description' => 'Parse English Time from a string and convert to Unix',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('loft_dev_parse_time_form'),
    'access callback' => '_loft_dev_access',
    'type' => MENU_NORMAL_ITEM,
    'file' => loft_dev_include('pages', 2),
  );
  $items['admin/loft-dev/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/loft-dev/zebra'] = array(
    'title' => 'Zebra Striping',
    'page callback' => 'loft_dev_zebra_striping_page',
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_TASK,
    'file' => loft_dev_include('pages', 2),
  );
  $items['admin/loft-dev/fpo-image'] = array(
    'title' => 'FPO Image',
    'page callback' => 'loft_dev_fpo_image_page',
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_TASK,
    'file' => loft_dev_include('pages', 2),
  );
  $items['admin/loft-dev/rem'] = array(
    'title' => 'REM Font Sizing',
    'page callback' => 'loft_dev_rem_page',
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_TASK,
    'file' => loft_dev_include('pages', 2),
  );
  $items['admin/loft-dev/server'] = array(
    'title' => 'Server Vars',
    'page callback' => 'loft_dev_server_vars_page',
    'access callback' => TRUE,
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_TASK,
    'file' => loft_dev_include('pages', 2),
  );

  $items['admin/loft-dev/list'] = array(
    'title' => 'Functions Lists',
    'page callback' => 'loft_dev_list_functions_page',
    'page arguments' => array('functions'),
    'access callback' => '_loft_dev_access',
    'type' => MENU_NORMAL_ITEM,
    'file' => loft_dev_include('pages', 2),
  );
  $items['admin/loft-dev/list/functions'] = array(
    'title' => 'PHP Functions',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/loft-dev/list/constants'] = array(
    'title' => 'PHP Constants',
    'page callback' => 'loft_dev_list_functions_page',
    'page arguments' => array(3),
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_TASK,
    'file' => loft_dev_include('pages', 2),
  );
  $items['admin/loft-dev/list/classes'] = array(
    'title' => 'PHP Classes',
    'page callback' => 'loft_dev_list_functions_page',
    'page arguments' => array(3),
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_TASK,
    'file' => loft_dev_include('pages', 2),
  );
  $items['admin/loft-dev/list/libraries'] = array(
    'title' => 'Drupal Libraries',
    'page callback' => 'loft_dev_list_libraries_page',
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_TASK,
    'file' => loft_dev_include('pages', 2),
  );
  $items['admin/loft-dev/list/fapi'] = array(
    'title' => 'FAPI Elements',
    'page callback' => 'loft_dev_list_fapi_elements_page',
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_TASK,
    'file' => loft_dev_include('pages', 2),
  );
  $items['admin/loft-dev/theme'] = array(
    'title' => 'Default Theme Tester',
    'page callback' => 'drupal_goto',
    'page arguments' => array('loft-dev/theme'),
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_TASK,
    'file' => loft_dev_include('pages', 2),
  );
  $items['admin/loft-dev/theme/admin'] = array(
    'title' => 'Admin Theme Tester',
    'page callback' => 'loft_dev_theme_test_page',
    'page arguments' => array(3),
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_TASK,
    'file' => loft_dev_include('pages', 2),
  );
  $items['admin/loft-dev/theme/403'] = array(
    'title' => '403 Theme Tester',
    'page callback' => 'drupal_goto',
    'page arguments' => array('loft-dev/theme/403'),
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/loft-dev/theme/404'] = array(
    'title' => '404 Theme Tester',
    'page callback' => 'drupal_goto',
    'page arguments' => array('loft-dev/theme/404'),
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/loft-dev/theme/offline'] = array(
    'title' => 'Offline Theme Tester',
    'page callback' => 'drupal_goto',
    'page arguments' => array('loft-dev/theme/offline'),
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_TASK,
  );

  $items['loft-dev/theme'] = array(
    'title' => 'Default Theme Tester',
    'page callback' => 'loft_dev_theme_test_page',
    'access callback' => '_loft_dev_access',
    'type' => MENU_CALLBACK,
    'file' => loft_dev_include('pages', 2),
  );
  $items['loft-dev/theme/action1'] = array(
    'title' => 'Action Link #1',
    'description' => 'Some description is helpful for UX',
    'page callback' => 'drupal_goto',
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['loft-dev/theme/action2'] = array(
    'title' => 'Action Link #2',
    'description' => 'Some description is helpful for UX',
    'page callback' => 'drupal_goto',
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['loft-dev/theme/action3'] = array(
    'title' => 'Action Link #3',
    'description' => 'Some description is helpful for UX',
    'page callback' => 'drupal_goto',
    'access callback' => '_loft_dev_access',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['loft-dev/theme/403'] = array(
    'title' => '403 Page Tester',
    'page callback' => 'drupal_access_denied',
    'access callback' => '_loft_dev_access',
    'type' => MENU_CALLBACK,
  );
  $items['loft-dev/theme/404'] = array(
    'title' => '404 Page Tester',
    'page callback' => 'drupal_not_found_page',
    'access callback' => '_loft_dev_access',
    'type' => MENU_CALLBACK,
    'file' => loft_dev_include('pages', 2),
  );
  $items['loft-dev/theme/offline'] = array(
    'page callback' => 'drupal_site_offline',
    'access callback' => '_loft_dev_access',
    'type' => MENU_CALLBACK,
  );
  $items['loft-dev/theme/playground'] = array(
    'title' => 'Loft Dev Theme Playground',
    'page callback' => 'loft_dev_playground_page',
    'access callback' => '_loft_dev_access',
    'type' => MENU_CALLBACK,
    'file' => loft_dev_include('pages', 2),
  );
  $items['loft-dev/theme/teasers'] = array(
    'page callback' => 'loft_dev_teasers_page',
    'access callback' => '_loft_dev_access',
    'type' => MENU_CALLBACK,
    'file' => loft_dev_include('pages', 2),
  );

  return $items;
}

/**
 * Implements hook_form_alter
 */
function loft_dev_form_alter(&$form, $form_state, $form_id) {

  $is_new = (empty($form['old_type']['#value']));

  if ($form_id == 'node_type_form' && $is_new) {

    //modify the node body so it is blank by default
    $form['#node_type']->body_label = '';
    $form['#node_type']->has_body = FALSE;
    $form['submission']['body_label']['#default_value'] = '';

    //turn off comments by default
    $form['comment']['comment']['#default_value'] = 0;

    //turn off promoted to front page default
    unset($form['workflow']['node_options']['#default_value'][1]);

    //expand title fieldset to change the title
    $form['submission']['#collapsed'] = 0;
  }
}

/**
 * Implements hook_permission().
 */
function loft_dev_permission() {
 return array(
   'loft_dev:use tools' => array(
     'title' => t('Use Loft Dev Tools'),
     'description' => t('Use Loft Dev tools; see also $conf["loft_dev_free_access"].'),
     'restrict access' => TRUE,
   ),
 );
}

/**
 * Determine if the current user has access to the dev tools
 *
 * @return bool
 */
function _loft_dev_access() {
  return user_access('loft_dev:use tools') || variable_get('loft_dev_free_access', FALSE);
}

/**
 * Implements hook_preprocess_html().
 */
function loft_dev_preprocess_html(&$vars) {
  global $_loft_dev_embedded_page_;
  if ($_loft_dev_embedded_page_ === TRUE) {
    $vars['theme_hook_suggestion'] = 'html__loft_dev_playground';
  }  

  // Append the loft dev tools to page_bottom
  $build    = array();
  $build['loft_dev']['block'] = module_invoke('loft_dev', 'block_view', 0);
  $vars['page']['page_bottom']['loft_dev_block'] = $build;
}

/**
 * Implements hook_preprocess_page().
 */
function loft_dev_preprocess_page(&$vars) {
  global $_loft_dev_embedded_page_;
  if ($_loft_dev_embedded_page_ === TRUE) {
    $vars['theme_hook_suggestion'] = 'page__loft_dev_playground';
  }
}

/**
 * Implements hook_block_info().
 */
function loft_dev_block_info() {
  $blocks['0'] = array(
    'info' => t('Loft Dev Tools'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function loft_dev_block_view($delta = '') {
  switch ($delta) {
    case 0:

      if (!_loft_dev_access()) {
        return array();
      }

      $build    = array();
      $build['#attached']['js'][] =  array(
        'type' => 'file', 
        'data' => 'misc/collapse.js',
      );
      $build['#attached']['css'][] =  array(
        'type' => 'file', 
        'data' => drupal_get_path('module', 'loft_dev') . '/loft_dev.css',
      );

      // The links for example pages
      $links = array();
      $links['theme'] = array(
        'title'       => 'Elements', 
        'href'        => 'loft-dev/theme', 
        'attributes'  => array(), 
      );
      $links['access-denied'] = array(
        'title'       => '403', 
        'href'        => 'loft-dev/theme/403', 
        'attributes'  => array(), 
      );
      $links['not-found'] = array(
        'title'       => '404', 
        'href'        => 'loft-dev/theme/404', 
        'attributes'  => array(), 
      );
      $links['maintenance'] = array(
        'title'       => 'Offline', 
        'href'        => 'loft-dev/theme/offline', 
        'attributes'  => array(), 
      );
      $links['playground'] = array(
        'title'       => 'Theme Playground', 
        'href'        => 'loft-dev/theme/playground', 
        'attributes'  => array(), 
      );
      $links['teasers'] = array(
        'title'       => 'Teasers', 
        'href'        => 'loft-dev/theme/teasers', 
        'attributes'  => array(), 
      );
      $links['font-sizing'] = array(
        'title' => t('Font Size'),
        'href' => 'admin/loft-dev/rem',
        'attributes' => array(
          'onclick' => 'window.open(this.href, "REM Sizing", "status=0,toolbar=0,location=0,menubar=0,directories=0,resizable=1,scrollbars=0,height=650,width=120"); return false;',
        ),
      );      
      $build['theming-pages'] = array(
        '#theme' => 'links', 
        '#links' => $links, 
        '#heading' => array(
          'text' => 'Theming Pages', 
          'level' => 'h2', 
          'class' => array(), 
        ), 
        '#attributes' => array(
          'class' => array('links', 'inline'), 
        ),
      );

      // Node suite
      $links = array();
      foreach (loft_dev_node_suite() as $type => $nid) {
        $links['node-' . $type] = array(
          'title' => $type,
          'href' => 'node/' . $nid,
        );
      }
      $build['node_suite'] = array(
        '#theme' => 'links', 
        '#links' => $links, 
        '#heading' => array(
          'text' => 'Node Suite', 
          'level' => 'h2', 
          'class' => array(), 
        ),
        '#attributes' => array(
          'class' => array('links', 'inline'), 
        ),
      );      
      
      // Links from other modules
      $links = module_invoke_all('loft_dev_menu');
      $build['loft_menu'] = array(
        '#theme' => 'links', 
        '#links' => $links, 
        '#heading' => array(
          'text' => 'Loft Menu', 
          'level' => 'h2', 
          'class' => array(), 
        ),
        '#attributes' => array(
          'class' => array('links', 'inline'), 
        ),
      );

      $output = '';
      $output .= drupal_render($build);
      $output = str_replace('href="/%23"', 'href="#"', $output);

      $output .= drupal_render(drupal_get_form('loft_dev_node_access_form')) . "\n";

      if (module_exists('masquerade') &&
          ($temp = module_invoke('masquerade', 'block_view', 0))) {
        if (is_string($temp['content'])) {
          $temp['content'] = array('#markup' => $temp['content']);
        }
        $output .= '<h3>'. $temp['subject'] .'</h3>'."\n";
        $output .= drupal_render($temp['content']) ."\n";
      }

      $output .= render(menu_tree('devel'));

      if (($temp = module_invoke('devel_node_access', 'block_view', 0))) {
        if (is_string($temp['content'])) {
          $temp['content'] = array('#markup' => $temp['content']);
        }
        $output .= '<h3>'. $temp['subject'] .'</h3>'."\n";
        $output .= drupal_render($temp['content']) ."\n";
      }

      if (($temp = module_invoke('devel_node_access', 'block_view', 1))) {
        if (is_string($temp['content'])) {
          $temp['content'] = array('#markup' => $temp['content']);
        }
        $output .= '<h3>'. $temp['subject'] .'</h3>'."\n";
        $output .= drupal_render($temp['content']) ."\n";
      }

      if (module_exists('func_search') && ($temp = module_invoke('func_search', 'block_view', 0))) {
        if (is_string($temp['content'])) {
          $temp['content'] = array('#markup' => $temp['content']);
        }
        $output .= '<h3>'. $temp['subject'] .'</h3>'."\n";
        $output .= drupal_render($temp['content']) ."\n";
      }

      // Email output
      if (_loft_dev_reroute_email_status()) {
        $output .= t('<p>Reroute email is enabled and ready: %mail</p>', array(
          '%mail' => variable_get('reroute_email_address', NULL),
        )) . "\n";
      }
      else {
        $output .= t('<p>!!! REROUTE EMAIL IS NOT READY !!!</p>') . "\n";
      }

      if (($path = variable_get('loft_dev_loft_deploy_export_path', ''))
        && ($last = variable_get('loft_dev_loft_deploy_export_last', 0))) {
        $date = new \DateTime();
        $date
          ->setTimestamp($last)
          ->setTimezone(new \DateTimeZone('America/Los_Angeles'));
        $output .= t('Database last backed at %time to %path', array(
          '%time' => $date->format('r'),
          '%path' => $path,
        ));
      }

      // Rewind form
      $output .= drupal_render(drupal_get_form('loft_dev_update_rewind_form'));

      // No more changes/additions
      $output = '<div id="loft-dev-tools" class="loft-dev-closure">'. $output .'</div> <!-- /loft-dev-closure -->'."\n";
      $block = array(
        //'subject' =>  t('Loft Dev Tools'),
        'content' => array(
          '#attached' => array(
            'js' => array(drupal_get_path('module', 'loft_dev') . '/loft_dev.js'),
          ),
          '#markup' => $output,
        ),
      );

      break;
  }
  return $block;
}

/**
 * Return the current status of reroute email
 *
 * @return bool
 *   FALSE: module is enabled, turned on, but config is not complete. FALSE
 *   means there needs to be a warning sent.
 */
function _loft_dev_reroute_email_status() {
  if (module_exists('reroute_email') &&
      (!variable_get('reroute_email_enable', NULL) ||
      !variable_get('reroute_email_address', NULL))) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_init().
 */
function loft_dev_init() {
  if (_loft_dev_access()
    && !_loft_dev_reroute_email_status()
    && current_path() != 'admin/config/development/reroute_email') {
    drupal_set_message(t('Reroute email is not properly enabled/configured. <a href="@url">Fix immediately</a>.', array(
      '@url' => url('admin/config/development/reroute_email'),
    )), 'error', FALSE);
  }

  $admin_stuff = module_invoke_all('loft_dev_admin_stuff');
  $build['#attached']['js'][] =  array(
    'type' => 'setting', 
    'data' => array(
      'loftDev' => array('adminStuff' => implode(', ', $admin_stuff['selectors'])),
    ),
  );
  $build['#attached']['js'][] =  array(
    'type' => 'file', 
    'data' => drupal_get_path('module', 'loft_dev') . '/loft_dev.js',
  );
  $build['#attached']['library'][] =  array('system', 'cookie');
  drupal_render($build);

  // Suppress admin menu if admin stuff hidden
  if (isset($_COOKIE['loft_dev_admin_stuff'])
    && $_COOKIE['loft_dev_admin_stuff'] === 'hidden'
    && function_exists('admin_menu_suppress')) {
    admin_menu_suppress();
  }
}

/**
 * Implements hook_exit().
 */
function loft_dev_exit() {
  if (variable_get('loft_dev_loft_deploy_export_period_mins', LOFT_DEV_LOFT_DEPLOY_EXPORT_PERIOD_MIN)) {
    $now = new \DateTime('now', new \DateTimeZone('America/Los_Angeles'));
    $now = $now->format('U');    
    $rollback = variable_get('loft_dev_loft_deploy_export_last', 0) + (variable_get('loft_dev_loft_deploy_export_period_mins', LOFT_DEV_LOFT_DEPLOY_EXPORT_PERIOD_MIN) * 60);
    if ($now >= $rollback) {
      loft_dev_include('pages');
      variable_set('loft_dev_loft_deploy_export_last', $now);
      if (!loft_dev_loft_deploy_export('loft_dev_auto')) {
        variable_set('loft_dev_loft_deploy_export_last', $rollback);
        if (_loft_dev_access()) {
          drupal_set_message(t("Loft Dev was unabled to export the database using <code>ld export</code>; review <a href='!uri'>reports</a> for more info.", array('!uri' => url('admin/reports/dblog'))), 'error');
        }
      }
    }
  }  
}

/**
 * Implements hook_loft_dev_admin_stuff().
 */
function loft_dev_loft_dev_admin_stuff() {
  return array(
    'selectors' => array(
      ".contextual-links-trigger",
      ".contextual-links-wrapper",
      ".block-masquerade",
      ".loft-deploy",
      ".loft-dev-closure",
      "#admin-menu",
      "#toolbar",
      ".dev-query",
      "ul.tabs.primary",
      ".views-field-edit-node",
    ),
  );
}

/**
 * Implements hook_loft_dev_menu
 *
 * Easily add links to the loft dev console
 *
 * @return array
 * This will be passed to theme_links
 * An array of arrays with:
 * - title: the visible link title
 * - href: the link to
 *
 * @see theme_links()
 */
function loft_dev_loft_dev_menu() {
  $links = array(
    array(
      'title' => t('Hide Admin Stuff'),
      'href' => '<front>',
      'attributes' => array(
        'class' => array(
          'loft-dev-closure-hide',
          'loft-dev-hide-admin-trigger'
        ),
      ),
    ),
    array(
      'title' => 'Functions',
      'href' => 'admin/loft-dev/list/functions',
    ),
    array(
      'title' => 'Constants',
      'href' => 'admin/loft-dev/list/constants',
    ),
    array(
      'title' => 'Classes',
      'href' => 'admin/loft-dev/list/classes',
    ),
  );

  $links[] = array(
    'title' => t('List Libraries'),
    'href' => 'admin/loft-dev/list/libraries',
  );

  return $links;
}

/**
 * Implements hook_flush_caches().
 */
function loft_dev_flush_caches() {
  unset($_SESSION['loft_dev']['node_suite']);
}

/**
 * Return an array of nids, random, one of each node type
 */
function loft_dev_node_suite() {
  if ($cache = cache_get('loft_dev:node_suite', 'cache')) {
    $suite = empty($cache->data) ? NULL : $cache->data;
  }
  else {
    // Set the default values
    $suite = array();
    $cache = (object) array('data' => array());
  }
  if (empty($suite)) {
  
    $types = array_keys(node_type_get_types());
    foreach ($types as $type) {
      $query = db_select('node', 'n');
      $nid = $query
        ->fields('n', array('nid',))
        ->condition('status', 1)
        ->condition('type', $type)
        ->orderRandom()
        ->range(0,1)
        ->execute()
        ->fetchField();

      // If no published nodes then turn to unpublished
      if (empty($nid)) {
        $query = db_select('node', 'n');
        $nid = $query
          ->fields('n', array('nid',))
          ->condition('status', 0)
          ->condition('type', $type)
          ->orderRandom()
          ->range(0,1)
          ->execute()
          ->fetchField();
      }
      $suite[$type] = $nid;
    }
    ksort($suite);
  
    cache_set('loft_dev:node_suite', $suite, 'cache', CACHE_PERMANENT);
  }

  return $suite;
  
  // //use this to clear the above, if needed
  // cache_clear_all('loft_dev:node_suite', 'cache');  
}

/**
 * Form builder for the loft_dev_update_rewind form.
 *
 * Generates a form to select a module to rewind it's last update hook
 *
 * @see loft_dev_update_rewind_form_validate()
 * @see loft_dev_update_rewind_form_submit()
 * @ingroup forms
 */
function loft_dev_update_rewind_form($form, &$form_state) {
  $form = array();

  $modules = module_list(FALSE, FALSE, TRUE);
  $form['module'] = array(
    '#type' => 'select',
    '#title' => t('Replay Last Module Update'),
    '#default_value' => !empty($_SESSION['loft_dev']['last_rewind']) ? $_SESSION['loft_dev']['last_rewind'] : '',
    '#options' => $modules,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Replay Update'),
  );


  return $form;
}

/**
 * Form submission handler for loft_dev_update_rewind_form().
 *
 * @see loft_dev_update_rewind_form()
 * @see loft_dev_update_rewind_form_validate()
 */
function loft_dev_update_rewind_form_submit($form, &$form_state) {
  $_SESSION['loft_dev']['last_rewind'] = $form_state['values']['module'];

  $query = db_select('system', 's');
  $version = $query
    ->fields('s', array('schema_version'))
    ->condition('name', $form_state['values']['module'])
    ->execute()->fetchField();
  $count = db_update('system')
    ->fields(array('schema_version' => --$version))
    ->condition('name', $form_state['values']['module'])
    ->execute();
  if ($count) {
    drupal_set_message(t('%module has been rewound to schema version %version', array(
      '%module' => $form_state['values']['module'],
      '%version' => $version,
    )));
  }
  $form_state['redirect'] = 'update.php';
}


/**
 * These UTILITY FUNCTIONS can be copied into your module's .install file and
 * used for helping with one off updates; by copying them into your .install
 * file, you will not need to have this module running on production. Be sure to
 * rename the functions to match your module if you go this route.
 */

/**
 * Update helper function to move a block to a new region
 *
 * @param string $module
 * @param string $delta
 * @param string $new_region
 *   Set to empty() or -1 to disable block
 * @param array or string $themes
 *   If empty block will be moved for all themes.
 *   If one theme you may pass a string.
 * @param int $new_weight
 *   Optional, if you want to assign it a new weight.
 */
function loft_dev_move_block($module, $delta, $new_region, $themes = array(), $new_weight = NULL) {
  if (empty($themes)) {
    $themes = array_keys(list_themes(TRUE));
  }
  elseif (is_string($themes)) {
    $themes = array($themes);
  }

  $fields = array(
    'region' => empty($new_region) ? -1 : $new_region,
    'status' => empty($new_region) ? 0 : 1,
  );
  if ($new_weight) {
    $fields['weight'] = $new_weight;
  }

  db_update('block')
  ->fields($fields)
  ->condition('module', $module)
  ->condition('delta', $delta)
  ->condition('theme', $themes, 'IN')
  ->execute();
  cache_clear_all();
}

/**
 * Generate code for placement of all blocks
 *
 * @param string $theme
 *   Optional, will use the block placment for current theme if empty
 * @param array $themes
 *   An array of themes to match these settings
 *
 * @return string
 *   The return code can be added to hook_update_n to control placement of
 *   blocks in regions
 *
 * @code
 *  drush ev "loft_dev_export_block_regions(NULL, array('og2_theme',
 *  'fh_theme'))"
 * @endcode
 */
function loft_dev_export_block_regions($theme = NULL, $themes = array()) {
  if (empty($theme)) {
    $theme = variable_get('theme_default', NULL);
  }
  $query = db_select('block', 'b');
  $query
    ->fields('b', array('module', 'delta', 'region'))
    ->condition('theme', $theme)
    ->orderBy('region');
  $export = array();
  $region = NULL;
  foreach ($query->execute() as $data) {
    if ($region != $data->region) {
      $region = $data->region;
      $export[] = NULL;
      $export[] = "  // $region";
    }
    $export[] = "  loft_dev_move_block('" . $data->module . "', '" . $data->delta . "', '" . $data->region . "', array('" . implode("', '", $themes) . "'));";
  }
  print "\n";
  print implode("\n", $export);
  print "\n";
  return;
}

/**
 * @see loft_db_update_block().
 */
function loft_dev_update_block($delta, $block, $module = 'block') {
  if (!module_exists('loft_updb')) {
    watchdog('loft_dev', 'Missing module loft_updb', array(), WATCHDOG_ERROR);
    return;
  }
  return loft_updb_update_block($delta, $block, $module);
}

/**
 * Add a new custom block to the system
 *
 * @param bool $overwrite
 *   Set this to true to delete a block with a matching $description.
 * @param array $body
 *   - key is the numerical format id
 *   - value is the body text
 * @param string $description ($block->info)
 * @param array $placement
 *   - each key is a theme_name
 *   - each value is an array of regions for that theme
 * @param string title
 *
 * @return int
 *   The delta
 */
function loft_dev_new_block($overwrite, $body, $description, $placement = array(), $title = '') {
  $format = key($body);
  $body = current($body);

  if ($overwrite) {
    $old_delta = db_select('block_custom', 'bc')
      ->fields('bc', array('bid',))
      ->condition('info', $description)
      ->execute()
      ->fetchField();
    db_delete('block_custom')
      ->condition('info', $description)
      ->execute();
    db_delete('block')
      ->condition('module', 'block')
      ->condition('delta', $old_delta)
      ->execute();
    //db_delete('block_role')
    //  ->condition('module', 'block')
    //  ->condition('delta', $delta)
    //  ->execute();
  }
  $delta = db_insert('block_custom')
    ->fields(array(
      'body' => $body,
      'info' => $description,
      'format' => $format,
    ))
    ->execute();

  // This moves the delta in block_role
  // @todo wonky - aklump 11/07/2012 16:55:06
  if ($overwrite) {
    $count = db_update('block_role')
      ->fields(array('delta' => $delta))
      ->condition('module', 'block')
      ->condition('delta',  $old_delta)
      ->execute();
  }

  $query = db_insert('block')->fields(array(
    'visibility',
    'pages',
    'custom',
    'title',
    'module',
    'theme',
    'status',
    'weight',
    'delta',
    'cache'
  ));
  $theme_list = array_keys($placement);
  foreach ($theme_list as $theme_name) {
    $query->values(array(
      'visibility' => 0,
      'pages' => '',
      'custom' => 0,
      'title' => $title,
      'module' => 'block',
      'theme' => $theme_name,
      'status' => 0,
      'weight' => 0,
      'delta' => $delta,
      'cache' => DRUPAL_NO_CACHE,
    ));
  }
  $query->execute();

  //$query = db_insert('block_role')->fields(array('rid', 'module', 'delta'));
  //foreach (array_filter($form_state['values']['roles']) as $rid) {
  //  $query->values(array(
  //    'rid' => $rid,
  //    'module' => $form_state['values']['module'],
  //    'delta' => $delta,
  //  ));
  //}
  //$query->execute();

  // Store regions per theme for this block
  if (is_string($regions)) {
    $regions = array($regions);
  }
  foreach ($placement as $theme => $regions) {
    foreach ($regions as $region) {
      db_merge('block')
      ->key(array('theme' => $theme, 'delta' => $delta, 'module' => 'block'))
      ->fields(array(
        'region' => ($region == BLOCK_REGION_NONE ? '' : $region),
        'pages' => '',
        'status' => (int) ($region != BLOCK_REGION_NONE),
      ))
      ->execute();
    }
  }

  cache_clear_all();
  return $delta;
}

/**
 * Update a node
 *
 * @param int $nid
 * @param string or object
 *   If object this will be passed directly to node_save
 *   If a string it will be passed as the body of the node
 *
 * @return bool
 */
function loft_dev_update_node($nid, $body) {
  if (empty($node->nid)) {
    return FALSE;
  }
  node_save($node);
}

/**
 * Update helper function to reorder blocks in a region
 *
 * @param string $region
 * @param array $blocks
 *   Each element is 'module|delta'
 *
 * @return bool
 */
function loft_dev_block_order($region, $blocks, $starting_weight = -20) {
  $weight = $starting_weight;
  foreach ($blocks as $block) {
    if (!($block = explode('|', $block))) {
      return FALSE;
    }
    $count = db_update('block')
      ->fields(array('weight' => $weight))
      ->condition('module', $block[0])
      ->condition('delta', $block[1])
      ->execute();
    if (!$count) {
      return FALSE;
    }
    $weight += 1;
  }
}

//function _loft_dev_ga_options(&$options, $key = '') {
//  $allowed_array_keys = array('class');
//  $options = array_unique($options);
//  if (is_array($options)) {
//    foreach (array_keys($options) as $option_key) {
//      $value = current($options);
//      if (count($options) === 1 && !is_array($value)) {
//        $options = $value;
//      }
//      else {
//        _loft_dev_ga_options($options[$option_key], $option_key);
//      }
//    }
//  }
//}

/**
 * Get all the libraries by module
 */
function loft_dev_get_libraries() {
  $libraries = &drupal_static(__FUNCTION__, array());
  if (empty($libraries)) {
    $modules = module_list();
    foreach ($modules as $module) {
      if ($library = drupal_get_library($module)) {
        $libraries[$module] = $library;
      }
    }
    ksort($libraries);
  }
  return $libraries;
}

/**
 * Form builder for the loft_dev_node_access form.
 *
 * Generate the node access form
 *
 * @see loft_dev_node_access_form_validate()
 * @see loft_dev_node_access_form_submit()
 * @ingroup forms
 */
//D6: function loft_node_access_form($form_state) {
function loft_dev_node_access_form($form, &$form_state) {
  if (empty($_SESSION['loft_dev']['node_access'])) {
    $_SESSION['loft_dev']['node_access'] = array();
  }
  $default = $_SESSION['loft_dev']['node_access'];
  $has_settings = !empty($default);
  $default += array(
    'nids' => array(),
    'uids' => array(),
  );

  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Loft Node Access Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => $has_settings,
  );
  $form['settings']['nids'] = array(
    '#type' => 'textfield',
    '#description' => t('Comma separated list of nids'),
    '#title' => t('NIDs'),
    '#default_value' => implode(',',  $default['nids']),
    '#required' => TRUE,
  );
  $form['settings']['uids'] = array(
    '#type' => 'textfield',
    '#description' => t('Comma separated list of uids or usernames'),
    '#title' => t('Users'),
    '#default_value' => implode(',', $default['uids']),
    '#required' => TRUE,
  );
  $form['settings']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Build Table'),
  );


  $output = '';
  if ($default['nids'] && $default['uids']) {

    $nodes = node_load_multiple($default['nids']);
    $accounts = array();
    foreach ($default['uids'] as $uid) {
      if (!is_numeric($uid)) {
        $temp = user_load_by_name($uid);
      }
      else {
        $temp = user_load($uid);
      }
      if ($temp) {
        $accounts[] = $temp;
      }
    }
    $accounts = array_filter($accounts);

    // Build the table
    foreach ($nodes as $node) {
      $caption = t('nid: @nid (type: @type) title: @title', array(
        '@nid' => $node->nid,
        '@type' => $node->type,
        '@title' => $node->title,
      ));
      $rows = array();
      foreach ($accounts as $account) {
        $rows[] = array(
          theme("username", array('account' => $account)),
          node_access('create', $node, $account) ? t('Yes') : '&ndash;',
          node_access('view', $node, $account) ? t('Yes') : '&ndash;',
          node_access('update', $node, $account) ? t('Yes') : '&ndash;',
          node_access('delete', $node, $account) ? t('Yes') : '&ndash;'
        );
      }
      $output .= theme("table", array(
        'caption' => $caption,
        'header' => array(
          t('User'), t('Create'), t('View'), t('Edit'), t('Delete')
        ),
        'rows' => $rows,
      )) . "\n";
    }
    if ($output) {
      $form['table'] = array(
        '#markup' => $output,
      );
    }
  }

  return $form;
}

/**
 * Form submission handler for loft_node_access_form().
 *
 * @see loft_node_access_form()
 * @see loft_node_access_form_validate()
 */
function loft_dev_node_access_form_submit($form, &$form_state) {
  $form_state['values']['nids'] = explode(',', $form_state['values']['nids']);
  $form_state['values']['uids'] = explode(',', $form_state['values']['uids']);
  $_SESSION['loft_dev']['node_access'] = $form_state['values'];
}

/**
 * Supplies information about a given authentication method to Services.
 *
 * @return
 *   An associative array with information about the authentication method
 *   and its callbacks. The possible keys are as follows (all keys are
 *   optional unless noted).
 *
 *   - title (required): The display name for this authentication method.
 *   - description (required): Longer text describing this authentciation
 *     method.
 *   - authenticate_call (required): The name of a function to be called
 *     to perform the actual authentication. <details of params/return>
 *   - security_settings: A callback function which returns an associative
 *     array of Form API elements for a settings form.
 *   - default_security_settings: A callback funtion which returns an array
 *     with the default settings for the auth module.
 *   - _services_security_settings_validate: The name of a standard form
 *     validation callback for the form defined in 'security_settings'.
 *   - _services_security_settings_submit: The name of a standard form
 *     submit callback for the form defined in 'security_settings'.
 *   - alter_controllers: The name of a callback function which will alter a
 *     services method signature in order to add required arguments.
 *   - controller_settings: A callback function which returns an associative
 *     array of Form API elements for a controller settings form.
 *   - file: An include file which contains the authentication callbacks.
 */
function loft_dev_services_authentication_info() {
  return array(
    'title' => 'Loft Dev Preset User Auth', 
    'description' => 'Can be used to pre-authentate a given user for all calls during development.', 
    'authenticate_call' => '_loft_dev_services_authenticate_call', 
    'security_settings' => '_loft_dev_services_auth_form',
  );
}

/**
 * Authenticate a services call using the settings user.
 *
 * @param  array $settings 
 * @param  string $method   
 * @param  array $args     
 *
 * @return NULL||string           
 */
function _loft_dev_services_authenticate_call() {
  global $user;
  list($settings) = func_get_args();
  
  $user = user_load_by_name($settings['username']);
  if (empty($user->uid)) {
    return services_error(t("The username @name does not exist. Can't authenticate.", array(
      '@name' => $settings['username']
    )), 403);
  }
}

/**
 * Form builder for the _loft_dev_services_auth_form form.
 *
 * Settings for to define the uid of the user to use as authenticated.
 *
 * @param array $form
 * @param array &$form_state
 *
 * @ingroup forms
 */
function _loft_dev_services_auth_form($settings, &$form_state) {
  $form['username'] = array(
    '#type' => 'textfield',
    '#description' => t('All server calls will authenticate with this user.'),
    '#title' => t('Username'),
    '#default_value' => empty($settings['username']) ? '' : $settings['username'],
    '#required' => TRUE,
    '#autocomplete_path' => 'user/autocomplete',
    '#maxlength' => 60,
  );    

  return $form;
}

/**
 * Implements hook_theme().
 */
function loft_dev_theme($existing, $type, $theme, $path) {
  return array(
    'loft_dev_migration' => array(
      'variables' => array(
        'urls' => NULL,
        'results' => array(),
      ),
      'file' => loft_dev_include('theme', 2),
    ),
  );
}

/**
 * Implementation of hook_mail
 */
function loft_dev_mail_alter($message) {
  if (variable_get('loft_dev_mail_capture', FALSE)) {
    // Saves a copy of the message in the private files
    $url = 'private://loft-dev/mail/' . time() . '.txt';
    file_prepare_directory(dirname($url), FILE_CREATE_DIRECTORY);
    file_unmanaged_save_data(var_export($message, TRUE), $url);
  }
}