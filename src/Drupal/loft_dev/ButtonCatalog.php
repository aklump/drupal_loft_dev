<?php

namespace Drupal\loft_dev;

use AKlump\LoftLib\Component\Storage\FilePath;

class ButtonCatalog {

    protected $themes, $states, $layouts, $config, $theme;

    protected $cache = [];

    /**
     * ButtonCatalog constructor.
     */
    public function __construct(array $config)
    {
        $this->config = $config;
        $this->themes = $config['themes'];
        $this->modules = $config['modules'];
        $this->states = $config['states'];
        $this->layouts = $config['layouts'];
    }

    /**
     * Return the value of Theme
     *
     * @param mixed $default Optional, a default value other than null.
     *
     * @return mixed
     */
    public function getTheme($default = null)
    {
        return $this->theme;
    }

    /**
     * Set the value of Theme
     *
     * @param mixed $theme
     *
     * @return ButtonCatalog
     */
    public function setTheme($theme)
    {
        $this->theme = $theme;

        return $this;
    }

    public function writeSass()
    {

        //
        //
        // button--themes.scss
        //
        if (!empty($this->config['sass_themes_file'])) {
            $path = $this->config['sass_dir'] . '/' . $this->config['sass_themes_file'];
            $sass = new FilePath($path);
            $lines = ['// DO NOT EDIT THIS FILE; IT WILL BE AUTO-UPDATED'];

            $themes = $this->themes;
            $modules = array_flip($this->modules);

            if (count($themes)) {
            sort($themes);
            foreach ($themes as $theme) {
                    if (isset($modules[$theme])) {
                        $lines[] = ".button--$theme,";
                        unset($modules[$theme]);
                    }
                $lines[] = ".button.theme--$theme { @include button-theme--$theme();}";
                }
            }

            if (count($modules)) {
                throw new \RuntimeException("To have button modules you must first have a like-named theme; missing themes: " . implode(', ', array_keys($modules)));
            }

            if (count($modules)) {
                sort($modules);
                $lines[] = "//";
                $lines[] = "//";
                $lines[] = "// Button modules";
                $lines[] = "//";
                foreach ($modules as $module) {
                    $lines[] = ".button--$module { @include button-theme--$module();}";
                }
            }

            $contents = implode(PHP_EOL, $lines);
            $sass->put($contents)->save();
        }

        //
        //
        // button--states.scss
        //
        if (!empty($this->config['sass_states_file'])) {
            $path = $this->config['sass_dir'] . '/' . $this->config['sass_states_file'];
            $sass = new FilePath($path);
            $lines = ['// DO NOT EDIT THIS FILE; IT WILL BE AUTO-UPDATED'];
            $states = $this->states;
            sort($states);
            foreach ($states as $state) {
                $lines[] = ".button.is--$state {}";
            }
            $contents = implode(PHP_EOL, $lines);
            $sass->put($contents)->save();
        }

        //
        //
        // button--layout.scss
        //
        if (!empty($this->config['sass_layout_file'])) {
            $path = $this->config['sass_dir'] . '/' . $this->config['sass_layout_file'];
            $sass = new FilePath($path);
            $lines = ['// DO NOT EDIT THIS FILE; IT WILL BE AUTO-UPDATED'];
            $layouts = $this->layouts;
            sort($layouts);
            foreach ($layouts as $layout) {
                $lines[] = ".button.layout--$layout {}";
            }
            $contents = implode(PHP_EOL, $lines);
            $sass->put($contents)->save();
        }

        return $this;
    }

    /**
     * Return a render array will all the possible button arrangements
     *
     * @return array
     */
    public function build()
    {
        $cl = function ($suffix = '', $glue = '_') {
            return 'button-catalog' . ($suffix ? str_repeat($glue[0], 2) . $suffix : '');
        };

        $wrapper_class[] = $cl();
        $build = array();
        $build['buttons'] = array(
            '#weight' => 10,
            '#prefix' => '<div class="' . $cl('components') . '">',
            '#suffix' => '</div>',
        );
        $build[] = drupal_get_form('loft_dev_button_catalog_form', $this) + [
                '#prefix' => '<div class="' . $cl('form') . '">',
                '#suffix' => '</div>',
            ];
        $path = current_path();
        $parent = explode('/', $path);
        array_pop($parent);

        if (($theme = $this->getTheme())) {
            $wrapper_class[] = $cl('single', '-');
            $build[] = ['#markup' => '<h2>' . $theme . '</h2>'];
            $build[] = [
                '#markup' => t('<a href="!url">&#8592; Return to all buttons</a>', [
                    '!url' => url(implode('/', $parent)),
                ]),
            ];
            $layouts = [null => ''] + $this->layouts;
            foreach ($this->states as $state) {
                foreach ($layouts as $layout) {
                    $href = 'javascript:void(0);';
                    $build['buttons'][] = $this->config['button_callback']($this->getTitle(), $href, $theme, $state, $layout) + [
                            '#prefix' => '<div class="' . $cl('attributes') . '">' . drupal_attributes([
                                    'theme' => $theme,
                                    'state' => $state,
                                    'layout' => $layout,
                                ]) . '</div>',
                        ];
                }
            }
        }
        else {
            $build[] = ['#markup' => '<h1>Button Catalog</h1>'];

            $title = $this->getTitle();
            foreach ($this->themes as $theme) {
                $href = url($path . "/$theme");
                $build['buttons'][] = $this->config['button_callback']($title, $href, $theme, null, null);
            }
        }

        $build += [
            '#prefix' => '<div' . drupal_attributes([
                    'class' => $wrapper_class,
                ]) . '>',
            '#suffix' => '</div>',
        ];

        return $build;
    }

    public function getTitle()
    {
        if (is_null($title = $this->getCached('title', null))) {
            $title = _loft_dev_dummy_string(rand(1, 2));

            $this->setCached('title', $title);
        }

        return $title;
    }

    /**
     * Return the value of Themes
     *
     * @param mixed $default Optional, a default value other than null.
     *
     * @return mixed
     */
    public function getThemes($default = null)
    {
        return $this->themes;
    }

    /**
     * Set the value of Themes
     *
     * @param mixed $themes
     *
     * @return ButtonCatalog
     */
    public function setThemes($themes)
    {
        $this->themes = $themes;

        return $this;
    }

    /**
     * Return the value of States
     *
     * @param mixed $default Optional, a default value other than null.
     *
     * @return mixed
     */
    public function getStates($default = null)
    {
        return $this->states;
    }

    /**
     * Set the value of States
     *
     * @param mixed $states
     *
     * @return ButtonCatalog
     */
    public function setStates($states)
    {
        $this->states = $states;

        return $this;
    }

    /**
     * Return the value of Layouts
     *
     * @param mixed $default Optional, a default value other than null.
     *
     * @return mixed
     */
    public function getLayouts($default = null)
    {
        return $this->layouts;
    }

    /**
     * Set the value of Layouts
     *
     * @param mixed $layouts
     *
     * @return ButtonCatalog
     */
    public function setLayouts($layouts)
    {
        $this->layouts = $layouts;

        return $this;
    }

    /**
     * Return the cached value by key.
     *
     * @param string $key
     * @param mixed  $default Optional, a default value other than null.
     *
     * @return array
     */
    protected function getCached($key, $default = null)
    {
        return isset($this->cache[$key]) ? $this->cache[$key] : $default;
    }

    /**
     * Set the cached value by $key.
     *
     * @param array $key
     * @param array $value
     *
     * @return ButtonCatalog
     */
    protected function setCached($key, $value)
    {
        $this->cache[$key] = $value;

        return $this;
    }


}
